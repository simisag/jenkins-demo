pipeline {
    agent {
        label 'windows'
    }
    stages {
        stage('Cloning git') {
            steps {
                git 'https://github.com/simisag/jenkins-demo'
            }
        }
        stage('Build') {
            steps {
                
                echo 'Maven build'
                sh 'cd MavenProject ;mvn clean install'
            }
        }
        stage('Archive') {
            steps {
                echo 'Archiving the artifacts'
                archiveArtifacts artifacts: 'MavenProject/multi3/target/*.war', followSymlinks: false
            }
        }
        
       
        stage('Deploy') {
            steps {
                echo 'Deploying the artifacts'
                deploy adapters: [tomcat9(credentialsId: 'tomcat', path: '', url: 'http://104.197.34.244:8081/')], contextPath: null, onFailure: false, war: 'MavenProject/multi3/target/*.war'
        }   }
        
        stage('codecov') {
            parallel {
                stage('findbugs') {
            	    steps {
            	        git 'https://github.com/simisag/jenkins-demo'
    	                sh "cd javancss-master ; mvn findbugs:findbugs"
    	                findbugs canComputeNew: false, defaultEncoding: '', excludePattern: '', healthy: '', includePattern: '', pattern: '**/findbugsXml.xml', unHealthy: ''
  	                }
	            }
               stage('Cobertura') {
  	                steps {
    	                
                        sh 'cd MavenProject ;mvn cobertura:cobertura -Dcobertura.report.format=xml'
  	                }
	            }
    
    
            }
        }
        stage('Genrate Cobertura report') {
            steps {
                echo 'Genrate Cobertura report'
                cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: '**/target/site/cobertura/coverage.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
            }
        }
        stage('Cleaning workspace') {
            steps {
                echo 'Cleaning the workspace'
                cleanWs()
            }
        }
        

    }
    post {
            success {
                
                emailext body: 'BUILT SUCCESSFULLY', compressLog: true, replyTo: 'supt26680@gmail.com', subject: '$BUILD_NUMBER:Pipeline Build Status ', to: '${email_rec}'
            }
        }
    
}
